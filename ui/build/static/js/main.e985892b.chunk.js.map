{"version":3,"sources":["index.js"],"names":["ImageItem","types","model","url","string","selected","optional","boolean","actions","self","toggleSelected","ImageItemView","observer","item","src","onClick","style","padding","maxWidth","border","ImageItems","images","array","loadImages","flow","window","fetch","method","headers","body","JSON","stringify","getSnapshot","response","json","r","map","i","create","messageMe","alert","ImageItemsView","items","rows","forEach","image","index","push","span","imageItems","App","buttonName","this","props","length","align","type","size","React","Component","ReactDOM","render","document","getElementById"],"mappings":"+RAQMA,EAAYC,IACbC,MAAM,CACHC,IAAKF,IAAMG,OACXC,SAAUJ,IAAMK,SAASL,IAAMM,SAAS,KAE3CC,SAAQ,SAAAC,GAAI,MAAK,CACdC,eADc,WAEVD,EAAKJ,UAAYI,EAAKJ,cAI5BM,EAAgBC,aAAS,gBAAGC,EAAH,EAAGA,KAAH,OAC3B,2BACKA,EAAKV,KAAO,yBACTW,IAAKD,EAAKV,IACVY,QAAS,kBAAMF,EAAKH,kBACpBM,MAAO,CACHC,QAAS,MACTC,SAAU,OACVC,OAAQN,EAAKR,SAAW,gBAAkB,aAMpDe,EAAanB,IACdC,MAAM,CACHmB,OAAQpB,IAAMK,SAASL,IAAMqB,MAAMtB,GAAY,MAElDQ,SAAQ,SAAAC,GAkBL,MAAO,CACHc,WAfeC,YAAI,UAAC,SAAUD,IAAV,yEACH,OADG,SACGE,OAAOC,MAAM,gCAAiC,CACjEC,OAAQ,OACRC,QAAS,CACL,eAAgB,mBAChB,OAAU,oBAEdC,KAAMC,KAAKC,UAAUC,YAAYvB,MAPjB,OAUV,OATJwB,EADc,gBAUJA,EAASC,OAVL,OAUdC,EAVc,OAWpB1B,EAAKY,OAASc,EAAEd,OAAOe,KAAI,SAAAC,GAAC,OAAIrC,EAAUsC,OAAOD,MAX7B,oCAAUd,OAgB9BgB,UAnBc,WACdC,MAAMV,KAAKC,UAAUC,YAAYvB,UAsBvCgC,EAAiB7B,aAAS,YAAgB,IAAb8B,EAAY,EAAZA,MAC3BC,EAAO,GAQX,OAPAD,EAAMrB,OAAOuB,SAAQ,SAACC,EAAOC,GACzBH,EAAKI,KACD,kBAAC,IAAD,CAAKC,KAAM,GACP,kBAACrC,EAAD,CAAeE,KAAMgC,SAK7B,6BACA,kBAAC,IAAD,KACKF,OAOPM,EAAa7B,EAAWkB,OAAO,CACjCjB,OAAQ,KAIN6B,E,iLAEE,IACIC,EADYC,KAAKC,MAAMJ,WAAWK,OACT,EAAI,SAAW,QAC5C,OACI,6BACI,kBAACb,EAAD,CAAgBC,MAAOU,KAAKC,MAAMJ,aAClC,yBAAKM,MAAM,UACP,kBAAC,IAAD,CAAQC,KAAK,UAAUC,KAAK,QAAQ1C,QAASqC,KAAKC,MAAMJ,WAAW1B,YAAa4B,S,GARlFO,IAAMC,WAgBxBC,IAASC,OACP,kBAACX,EAAD,CAAKD,WAAYA,IACjBa,SAASC,eAAe,W","file":"static/js/main.e985892b.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {observer} from \"mobx-react\";\nimport {types, flow, getSnapshot} from \"mobx-state-tree\";\nimport 'antd/dist/antd.css';\nimport {Button, Row, Col} from \"antd\";\n\n\nconst ImageItem = types\n    .model({\n        url: types.string,\n        selected: types.optional(types.boolean, false)\n    })\n    .actions(self => ({\n        toggleSelected() {\n            self.selected = !self.selected\n        },\n    }));\n\nconst ImageItemView = observer(({ item }) => (\n    <p>\n        {item.url && <img\n            src={item.url}\n            onClick={() => item.toggleSelected()}\n            style={{\n                padding: \"1em\",\n                maxWidth: \"100%\",\n                border: item.selected ? \"5px solid red\" : \"1px\",\n            }}\n        />}\n    </p>\n));\n\nconst ImageItems = types\n    .model({\n        images: types.optional(types.array(ImageItem), [])\n    })\n    .actions(self => {\n        const messageMe = function () {\n            alert(JSON.stringify(getSnapshot(self)));\n        };\n        const loadImages = flow(function* loadImages() {\n            const response = yield window.fetch('http://localhost:14321/update', {\n                method: 'post',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json'\n                },\n                body: JSON.stringify(getSnapshot(self))\n            });\n\n            const r = yield response.json();\n            self.images = r.images.map(i => ImageItem.create(i));\n        });\n\n        return {\n            loadImages,\n            messageMe\n        }\n    });\n\nconst ImageItemsView = observer(({ items }) => {\n    let rows = [];\n    items.images.forEach((image, index) => {\n        rows.push(\n            <Col span={6}>\n                <ImageItemView item={image}/>\n            </Col>\n        )\n    });\n    return (\n        <div>\n        <Row>\n            {rows}\n        </Row>\n        </div>\n    )\n});\n\n\nconst imageItems = ImageItems.create({\n    images: []\n});\n\n\nclass App extends React.Component {\n    render() {\n        let numImages = this.props.imageItems.length;\n        let buttonName = numImages > 0 ? \"Submit\" : \"Start\";\n        return (\n            <div>\n                <ImageItemsView items={this.props.imageItems}/>\n                <div align=\"center\">\n                    <Button type=\"primary\" size=\"large\" onClick={this.props.imageItems.loadImages}>{buttonName}</Button>\n                </div>\n            </div>\n        )\n    }\n}\n\n\nReactDOM.render(\n  <App imageItems={imageItems}/>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}